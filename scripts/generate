#!/usr/bin/env node
const cdaContentful = require('contentful');
const { Nuxt, Builder, Generator } = require('nuxt-edge');
const path = require('path');

const { getConfig } = require('../lib/config.js');
const ctfConfig = getConfig();
const cdaClient = cdaContentful.createClient({
  accessToken: ctfConfig.CTF_CDA_TOKEN,
  host: 'cdn.contentful.com',
  space: ctfConfig.CTF_SPACE_ID
});
const isProduction = process.env.NODE_ENV === 'production';
const isContentUpdate = process.env.WEBHOOK_TITLE === 'CONTENT_UPDATE';

const BUILD_CACHE = isProduction
  ? path.join('/', 'opt', 'build', 'cache', 'dist')
  : path.resolve(__dirname, '..', '.dist');

async function generate() {
  const nuxt = new Nuxt(getNuxtConfig());
  const builder = new Builder(nuxt);
  const generator = new Generator(nuxt, builder);

  try {
    await generator.generate(getGenerateOptions());
  } catch (e) {
    console.error(e);
    throw e;
  }
}

function getGenerateOptions() {
  return {
    init: !isContentUpdate,
    build: !isContentUpdate
  };
}

function getNuxtConfig() {
  const config = require('../nuxt.config.js');
  config.mode = 'universal';
  config.dev = false;
  config.generate = {
    routes: getRoutes
  };
  return config;
}

function getRoutes() {
  if (!isContentUpdate) {
    return getRoutesToUpdate();
  } else {
    return getAllRoutes();
  }
}

async function getRoutesToUpdate() {
  const syncResult = await cdaClient.sync({
    initial: true,
    type: 'Entry'
  });

  const routes = [
    '404',
    ...syncResult.entries
      .map(entry => getRouteForEntry(entry))
      // filter out false routes for entries
      // that don't have their own route
      .filter(route => !!route)
  ];

  console.log(routes);
  return routes;
}

function getRouteForEntry(entry) {
  const getSlug = entry => entry.fields.slug['en-US'];

  switch (entry.sys.contentType.sys.id) {
    // case '2wKn6yEnZewu2SCCkus4as':
    //   return `/blog/${getSlug(entry)}`;
    // case 'tilPost':
    //   return `/today-i-learned/${getSlug(entry)}`;
    // case 'landingPage':
    //   return `/${getSlug(entry)}`;
    case 'topic':
      return `/topics/${getSlug(entry)}`;
    default:
      null;
  }
}

function getAllRoutes() {
  return Promise.all([
    cdaClient.getEntries({
      content_type: '2wKn6yEnZewu2SCCkus4as',
      order: '-fields.date'
    }),
    cdaClient.getEntries({
      content_type: 'tilPost',
      order: '-fields.date'
    }),
    cdaClient.getEntries({
      content_type: 'landingPage'
    }),
    cdaClient.getEntries({
      content_type: 'topic'
    })
  ]).then(([blogPosts, tilPosts, landingPages, topics]) => {
    const postPages = blogPosts.items.reduce((pages, entry, index) => {
      pages.push(`/blog/${entry.fields.slug}`);

      if (index % 5 === 0 && index !== 0) {
        pages.push(`/blog/page/${Math.floor(index / 5)}`);
      }

      return pages;
    }, []);

    const tilPages = tilPosts.items.map(
      item => `/today-i-learned/${item.fields.slug}`
    );

    const landingPageSlugs = landingPages.items.map(
      item => `/${item.fields.slug}`
    );

    const topicSlugs = topics.items
      .filter(item => item.fields.title !== 'Newsletter')
      .map(item => `/topics/${item.fields.slug}`);

    return [...postPages, ...tilPages, ...landingPageSlugs, ...topicSlugs];
  });
}

generate();
