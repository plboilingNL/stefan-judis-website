#!/usr/bin/env node

require('dotenv').config();
const { queryContentful, queryGithub } = require('../lib/graphql');
const camelcase = require('camelcase');
const { logSeparator, logSuccess, writeDataFile } = require('./utils');

const query = `
{
  user(login: "stefanjudis") {
    repositories(first: 15, orderBy: {field: STARGAZERS, direction: DESC}, ) {
      nodes {
        ...Repo
      }
    }
    pinnedItems(first: 6) {
      nodes {
        ... on Repository {
          ...Repo
        }
      }
    }
  }
}

fragment Repo on Repository {
  name
  description
  url
  updatedAt
  collaborators {
    totalCount
  }
  stargazers {
    totalCount
  }
  forks {
    totalCount
  }
}`;

async function getGitHubProjects() {
  const { data } = await queryContentful(getProjectQuery());
  return data.projectCollection.items.filter((project) =>
    project.githubUrl?.startsWith('https://github.com')
  );
}

async function getData() {
  try {
    logSeparator('Fetching GitHub data');

    let { collection: projects } = Object.values(
      (await queryGithub(query)).data.user
    )
      .map(({ nodes }) => nodes)
      .flat()
      .reduce(
        (acc, cur) => {
          if (!acc.set.has(cur.name)) {
            acc.set.add(cur.name);
            acc.collection.push(cur);
          }

          return acc;
        },
        { set: new Set(), collection: [] }
      );

    projects = projects.sort((a, b) =>
      a.stargazers.totalCount > b.stargazers.totalCount ? -1 : 1
    );

    logSuccess('Data fetched');
    logSeparator('Writing JSON data file');

    writeDataFile('_githubProjects.json', JSON.stringify(projects));

    logSuccess('JSON file written');
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
}

getData();
