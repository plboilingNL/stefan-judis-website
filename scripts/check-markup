#!/usr/bin/env node

const htmlparser = require('htmlparser2');
const { promisify } = require('util');
const glob = promisify(require('glob'));
const readFile = promisify(require('fs').readFile);
const { logError, logSeparator, logSuccess } = require('./utils');

// TODO get the nuxt folder out of here
const DIST_HTML = './dist/**/*.html';
const FILES_TO_IGNORE = [
  './dist/_nuxt/index.spa.html',
  './dist/_nuxt/index.ssr.html',
  './dist/google9219fc7071b7ea7c.html'
];
(async () => {
  try {
    logSeparator('Validating markup');

    const filePaths = await glob(DIST_HTML);
    const files = await readFiles(filePaths);

    const validatedFiles = await getValidatedFiles(files);
    const invalidFiles = validatedFiles.filter(file => !file.valid);

    if (invalidFiles.length) {
      logError("The following files don't have a description:");
      console.log(invalidFiles.map(file => file.name).join('\n'));

      return process.exit(1);
    }

    logSuccess('Markup looks good (all thml files have a valid description');

    process.exit(0);
  } catch (e) {
    console.log(e);
  }
})();

function getValidatedFiles(files) {
  return Promise.all(
    files
      .filter(file => FILES_TO_IGNORE.indexOf(file.name) === -1)
      .map(file => {
        return new Promise((resolve, reject) => {
          let hasDescription = false;
          const parser = new htmlparser.Parser({
            onopentag: (name, attr) => {
              if (
                name === 'meta' &&
                attr.name === 'description' &&
                attr.content.length &&
                attr.content !== 'Nuxt.js project'
              ) {
                hasDescription = true;
              }
            },
            onend: () => {
              file.valid = hasDescription;
              resolve(file);
            }
          });
          parser.write(file.content);
          parser.end();
        });
      })
  );
}

function readFiles(filePaths) {
  return Promise.all(
    filePaths.map(fileName => {
      return new Promise((resolve, reject) => {
        readFile(fileName, { encoding: 'utf8' })
          .then(content => {
            resolve({
              name: fileName,
              content
            });
          })
          .catch(reject);
      });
    })
  );
}
