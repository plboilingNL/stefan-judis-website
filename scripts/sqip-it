#!/usr/bin/env node

const contentful = require('contentful');
const sqip = require('sqip');
const download = require('download');
const path = require('path');
const { emptyDir, writeFile, readFile } = require('fs-extra');

const { getConfig } = require('../lib/config.js');
const { CTF_SPACE_ID, CTF_CDA_TOKEN } = getConfig();
const client = contentful.createClient({
  accessToken: CTF_CDA_TOKEN,
  host: 'cdn.contentful.com',
  space: CTF_SPACE_ID
});

const { getCachePath, shouldClearCache } = require('./utils/index.js');
const SQIP_CACHE = getCachePath('sqip');
const JS_DESTINATION = path.resolve(__dirname, '..', 'plugins', 'image-map.js');
async function sqipItems() {
  console.log('// --------------------------------------------');

  if (shouldClearCache) {
    console.log(`Clearing ${SQIP_CACHE}`);
    await emptyDir(SQIP_CACHE);
  }

  console.log('// --------------------------------------------');

  console.log('Getting asset information');
  const { items } = await client.getAssets({ limit: 1000 });
  let images = items
    .filter(
      ({ fields }) =>
        fields.file &&
        ['image/png', 'image/jpeg'].indexOf(fields.file.contentType) !== -1
    )
    .map(({ sys, fields }) => ({
      id: sys.id,
      revision: sys.revision,
      url: fields.file.url,
      filename: `${sys.id}-${sys.revision}.${
        fields.file.contentType.split('/')[1]
      }`,
      svg: null
    }));
  console.log('Asset information queried');

  console.log('// --------------------------------------------');

  console.log(`Reading cached SVGs from at ${SQIP_CACHE}`);
  images = await Promise.all(
    images.map(async image => {
      try {
        const svg = await readFile(
          `${SQIP_CACHE}/${image.id}-${image.revision}.svg`,
          'utf8'
        );
        if (svg.startsWith('<svg')) {
          image.svg = svg;
        }
      } catch (e) {}

      return image;
    })
  );
  console.log('Cached SVGs read');

  console.log('// --------------------------------------------');

  console.log('Downloading images for missing SVGs...');
  await Promise.all(
    images.map(({ url, filename, svg }) => {
      if (!svg) {
        console.log(`${filename} is missing -> downloading`);
        return download(url.replace(/\/\//, 'https://'), SQIP_CACHE, {
          filename
        });
      }

      return Promise.resolve();
    })
  );
  console.log('Images downloaded');

  console.log('// --------------------------------------------');

  console.log('Creating missing SVGs...');
  await Promise.all(
    images.map(({ id, revision, filename, svg }) => {
      if (!svg) {
        const { final_svg } = sqip({
          filename: path.join(SQIP_CACHE, filename),
          numberOfPrimitives: 10,
          mode: 0,
          blur: 0
        });

        return writeFile(
          path.join(SQIP_CACHE, `${id}-${revision}.svg`),
          final_svg
        );
      }

      return Promise.resolve();
    })
  );
  console.log('SVGs created');

  console.log('// --------------------------------------------');

  console.log('Reading missing SVGs...');
  images = await Promise.all(
    images.map(async image => {
      if (!image.svg) {
        const svg = await readFile(
          path.join(SQIP_CACHE, `${image.id}-${image.revision}.svg`),
          'utf8'
        );
        image.svg = svg.replace('<svg', `<svg id="${image.id}"`);
      }

      return image;
    })
  );
  console.log('SVGs read');

  console.log('// --------------------------------------------');

  console.log('Writing JS mapping file');
  await writeFile(
    JS_DESTINATION,
    `export default {\n  ${images
      .map(({ id, svg }) => `'${id}': '${svg}'`)
      .join(', ')}\n}\n`
  );
  console.log('JS file written');

  console.log('// --------------------------------------------');
}

sqipItems();
