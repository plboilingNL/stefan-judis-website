#!/usr/bin/env node

const contentful = require('contentful')
const { getConfigForKeys } = require('../lib/config.js')
const {
  CTF_SPACE_ID,
  CTF_CDA_TOKEN,
  CTF_CPA_TOKEN
} = getConfigForKeys([
  'CTF_SPACE_ID',
  'CTF_CDA_TOKEN',
  'CTF_CPA_TOKEN'
])
const {exec} = require('child_process')
const download = require('download')
const path = require('path')
const {promisify} = require('util')
const {writeFile, readFile} = require('fs')
const {emptyDir} = require('fs-extra')
const timeSpan = require('time-span')
const isProduction = process.env.NODE_ENV === 'production'
const SQIP_CACHE = isProduction
  ? path.join('/', 'opt', 'build', 'cache', 'sqip')
  : path.resolve(__dirname, '..', '.sqip')
const JS_DESTINATION = path.resolve(__dirname, '..', 'plugins', 'image-map.js')
const SQIP_EXEC = path.resolve(__dirname, '..', 'node_modules', '.bin', 'sqip')
const client = contentful.createClient({
  accessToken:
    isProduction
      ? CTF_CDA_TOKEN
      : CTF_CPA_TOKEN,
  host:
    isProduction
      ? 'cdn.contentful.com'
      : 'preview.contentful.com',
  space: CTF_SPACE_ID
})

const write = promisify(writeFile)
const read = promisify(readFile)
const execute = promisify(exec)

async function sqipItems () {
  const end = timeSpan()

  console.log('// --------------------------------------------')

  if (process.env.WEBHOOK_TITLE === 'CLEAR_CUSTOM_CACHE') {
    console.log(`Clearing ${SQIP_CACHE}`)
    await emptyDir(SQIP_CACHE)
  }

  console.log('// --------------------------------------------')

  console.log('Getting asset information')
  const {items} = await client.getAssets({limit: 1000})
  let images = items
    .filter(
      ({fields}) => fields.file && ['image/png', 'image/jpeg'].indexOf(fields.file.contentType) !== -1
    )
    .map(({sys, fields}) => ({
      id: sys.id,
      revision: sys.revision,
      url: fields.file.url,
      filename: `${sys.id}-${sys.revision}.${fields.file.contentType.split('/')[1]}`,
      svg: null
    }))
  console.log('Asset information queried')

  console.log('// --------------------------------------------')

  console.log(`Reading cached SVGs from at ${SQIP_CACHE}`)
  images = await Promise.all(images.map(async (image) => {
    try {
      const svg = await read(`${SQIP_CACHE}/${image.id}-${image.revision}.svg`, 'utf8')
      if (svg.startsWith('<svg')) {
        image.svg = svg
      }
    } catch (e) {}

    return image
  }))
  console.log('Cached SVGs read')

  console.log('// --------------------------------------------')

  console.log('Downloading images for missing SVGs...')
  await Promise.all(
    images.map(({url, filename, svg}) => {
      if (!svg) {
        console.log(`${filename} is missing -> downloading`)
        return download(
          url.replace(/\/\//, 'https://'),
          SQIP_CACHE,
          { filename }
        )
      }

      return Promise.resolve()
    })
  )
  console.log('Images downloaded')

  console.log('// --------------------------------------------')

  console.log('Creating missing SVGs...')
  await Promise.all(images.map(({id, revision, filename, svg}) => {
    if (!svg) {
      const command = `${SQIP_EXEC} -o ${id}-${revision}.svg -n 15 -m 0 -b 0 ${filename}`

      return execute(
        command,
        {cwd: SQIP_CACHE}
      )
    }

    return Promise.resolve()
  }))
  console.log('SVGs created')

  console.log('// --------------------------------------------')

  console.log('Reading missing SVGs...')
  images = await Promise.all(images.map(async (image) => {
    if (!image.svg) {
      const svg = await read(path.join(SQIP_CACHE, `${image.id}-${image.revision}.svg`), 'utf8')
      image.svg = svg.replace('<svg', `<svg id="${image.id}"`)
    }

    return image
  }))
  console.log('SVGs read')

  console.log('// --------------------------------------------')

  console.log('Writing JS mapping file')
  write(
    JS_DESTINATION,
    `export default {\n  ${images.map(({id, svg}) => `'${id}': '${svg}'`).join(', ')}\n}\n`
  )
  console.log('JS file written')

  console.log('// --------------------------------------------')

  console.log(end.seconds())
}

sqipItems()
